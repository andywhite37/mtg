#!/usr/bin/env node
var _ = require('lodash');
var Promise = require('bluebird');
var chalk = require('chalk');
var fs = require('fs');
var path = require('path');
var pgb = require('pg-bluebird');
var request = require('request');
Promise.promisifyAll(request);

var baseUrl = 'http://localhost:9999/api';
var sets = JSON.parse(fs.readFileSync(path.join(__dirname, 'AllSets-x.json'), 'utf-8'));
var setCodes = _.keys(sets);

function hasSet(set) {
  return request.headAsync({
    url: baseUrl + '/sets/' + set.code,
  })
  .spread(function(response, body) {
    return isHttpSuccess(response);
  });
}

function publishSet(set) {
  return hasSet(set)
    .then(function(exists) {
      console.log('publishing set %s... (exists = %s)', set.code, exists);
      //set.block = set.block || '';
      return exists ?
        request.putAsync({
          url: baseUrl + '/sets/' + set.code,
          body: set,
          json: true
        }) :
        request.postAsync({
          url: baseUrl + '/sets',
          body: set,
          json: true
        });
    })
    .spread(function(response, body) {
      checkResponse(response);
      return body;
    });
}

function hasCard(card) {
  return request.headAsync({
    url: baseUrl + '/cards/' + card.id,
  })
  .spread(function(response, body) {
    return response.statusCode === 204;
  });
}

function publishCard(set, card) {
  card.border = card.border || set.border;
  card.releaseDate = card.releaseDate || set.releaseDate;
  card.number = card.number || card.mciNumber;
  card.multiverseid = card.multiverseid || -1;

  return hasCard(card)
    .then(function(exists) {
      console.log('publishing card %s (%s) (exists = %s)...', card.name, set.code, exists);
      return exists ?
        request.putAsync({
          url: baseUrl + '/cards/' + card.id,
          body: card,
          json: true
        }) :
        request.postAsync({
          url: baseUrl + '/cards',
          body: card,
          json: true
        });
    })
    .spread(function(response, body) {
      checkResponse(response);
      return body;
    });
}

function hasSetCard(set, card) {
  return request.headAsync({
    url: baseUrl + '/sets/' + set.code + '/cards/' + card.id
  })
  .spread(function(response, body) {
    return response.statusCode === 204;
  });
}

function publishSetCard(set, card) {
  return hasSetCard(set, card)
    .then(function(exists) {
      console.log('publishing set_card %s <-> %s', set.code, card.name);
      return exists ?
        null :
        request.postAsync({
          url: baseUrl + '/sets/' + set.code + '/cards/' + card.id
        })
        .spread(function(response, body) {
          checkResponse(response);
          return null;
        });
    });
}

function rankCards(){
  console.log('re-ranking cards...');
  return request.putAsync({
    url: baseUrl + '/card-rankings'
  })
  .spread(function(response, body) {
    checkResponse(response);
    return null;
  });
}

function checkResponse(response) {
  if (!isHttpSuccess(response)) {
    throw new Error('API error ' + response.statusCode);
  }
}

function isHttpSuccess(response) {
  return response.statusCode >= 200 && response.statusCode < 300;
}

Promise.each(setCodes, function(setCode) {
  var set = sets[setCode];
  var cards = set.cards;
  delete set.cards;
  return publishSet(set)
    .then(function(set) {
      return Promise.each(cards, function(card) {
        return publishCard(set, card)
          .then(function(card) {
            return publishSetCard(set, card);
          });
      });
    });
})
.then(function(_) {
  return rankCards();
})
.then(function(_) {
  console.log(chalk.green('done!'));
})
.catch(function(err) {
  console.error(chalk.red('error'));
  console.error(err);
});
